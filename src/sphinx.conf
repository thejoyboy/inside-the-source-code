
#############################################################################
## source definition
#############################################################################

source common
{
        type                    = mysql

        sql_host                = localhost
        sql_user                = *******
        sql_pass                = *******
        sql_db                  = sphinx_test
        sql_port                = 3306

        sql_query_pre           = SET NAMES utf8
        sql_query_pre           = SET time_zone = UTC
        sql_query_range         = SELECT MIN(id),MAX(id) FROM docs
        sql_range_step          = 1000
}

source src1 : common
{
        sql_query               = SELECT id, attr1, attr2, attr3, \
                                title, content FROM docs WHERE \
                                id >= $start AND id <= $end

        sql_attr_uint           = attr1
        sql_attr_uint           = attr2
        sql_attr_uint           = attr3
}

source src2
{
	type			= xmlpipe2
	xmlpipe_command		= php /var/lib/sphinxsearch/generate_data.php xml 100

	xmlpipe_field		= title
	xmlpipe_field		= content

	xmlpipe_attr_bigint	= attr1
	xmlpipe_attr_bool	= attr2
	xmlpipe_attr_timestamp	= attr3
	xmlpipe_attr_float	= attr4
	xmlpipe_attr_json	= attr5

	xmlpipe_fixup_utf8	= 1
}

source src3 : common
{
        sql_query               = SELECT id, attr1, attr2, attr3, \
                                UNIX_TIMESTAMP(created_on) created_on, \
                                title, content FROM docs WHERE \
                                id >= $start AND id <= $end

        sql_attr_uint           = attr1
        sql_attr_uint           = attr2
        sql_attr_uint           = attr3
        sql_field_string        = title
        sql_field_string        = content
        sql_attr_timestamp      = created_on
}

source src4 : common
{
        sql_query               = SELECT id, attr1, attr2, attr3, \
                                UNIX_TIMESTAMP(created_on) created_on, \
                                title, content, json_content FROM docs WHERE \
                                id >= $start AND id <= $end

        sql_attr_uint           = attr1
        sql_attr_uint           = attr2
        sql_attr_uint           = attr3
        sql_field_string        = title
        sql_field_string        = content
        sql_attr_json           = json_content 
        sql_attr_timestamp      = created_on
}

source src5
{
	type			= tsvpipe
	tsvpipe_command 	= php /var/lib/sphinxsearch/generate_data.php tsv 100
	
	tsvpipe_field		= title
	tsvpipe_field		= content

	tsvpipe_attr_bigint	= attr1
	tsvpipe_attr_bool	= attr2
	tsvpipe_attr_timestamp	= attr3
	tsvpipe_attr_float	= attr4
	tsvpipe_attr_json	= attr5	
}

#############################################################################
## index definition
#############################################################################

index test_utf8
{
        source                  = src1
        path                    = /var/lib/sphinxsearch/data/test_utf8
        min_word_len            = 2

        # charset definition and case folding rules "table"
        # optional, default value depends on charset_type
        #
        # defaults are configured to include English and Russian characters only
        # you need to change the table to include additional ones
        # this behavior MAY change in future versions
        #
        # 'sbcs' default value is
        # charset_table         = 0..9, A..Z->a..z, _, a..z, U+A8->U+B8, U+B8, \
        #                        U+C0..U+DF->U+E0..U+FF, U+E0..U+FF
        #
        # 'utf-8' default value is
        charset_table           = 0..9, A..Z->a..z, _, a..z, \
                                U+410..U+42F->U+430..U+44F, U+430..U+44F
}

index test_pl_chars1
{
        source                  = src1
        path                    = /var/lib/sphinxsearch/data/test_pl_chars1
        min_word_len            = 2

        # Polish case folding
        charset_table           = 0..9, A..Z->a..z, a..z, U+0143->U+0144, \
                                U+0104->U+0105, U+0106->U+0107, U+0118->U+0119, \
                                U+0141->U+0142, U+00D3->U+00F3, U+015A->U+015B, \
                                U+0179->U+017A, U+017B->U+017C, U+0105, U+0107, \
                                U+0119, U+0142, U+00F3, U+015B, U+017A, U+017C, \
                                U+0144
}

index test_pl_chars2
{
        source                  = src1
        path                    = /var/lib/sphinxsearch/data/test_pl_chars2
        min_word_len            = 2

        # Polish case folding with mapping to a..z chars e.g Ä->a, Ä->c etc.
        charset_table           = 0..9, A..Z->a..z, a..z, U+0104->a, U+0105->a, \
                                U+0106->c, U+0107->c, U+0118->e, U+0119->e, \
                                U+0141->l, U+0142->l, U+00D3->o, U+00F3->o, \
                                U+0143->n, U+0144->n, U+015A->s, U+015B->s, \
                                U+0179->z, U+017A->z, U+017B->z, U+017C->z
}

index test_pl_wordforms
{
        source                  = src1
        path                    = /var/lib/sphinxsearch/data/test_pl_wordforms
        min_word_len            = 2
        charset_table           = 0..9, A..Z->a..z, a..z, U+0143->U+0144, \
                                U+0104->U+0105, U+0106->U+0107, U+0118->U+0119, \
                                U+0141->U+0142, U+00D3->U+00F3, U+015A->U+015B, \
                                U+0179->U+017A, U+017B->U+017C, U+0105, U+0107, \
                                U+0119, U+0142, U+00F3, U+015B, U+017A, U+017C, \
                                U+0144                            

        wordforms               = /etc/sphinxsearch/wordforms-pl-dict.txt                         
}

index test_eng_stemmer
{
        source                  = src1
        path                    = /var/lib/sphinxsearch/data/test_eng_stemmer
        min_word_len            = 2
        morphology              = stem_en
        min_stemming_len        = 4
}

index test_sphinxse1
{
        source                  = src1
        path                    = /var/lib/sphinxsearch/data/test_sphinxse1
        min_word_len            = 2
        charset_table           = 0..9, A..Z->a..z, _, a..z, \
                                U+410..U+42F->U+430..U+44F, U+430..U+44F
}

index test_sphinxse2
{
        source                  = src3
        path                    = /var/lib/sphinxsearch/data/test_sphinxse2
        min_word_len            = 2
        charset_table           = 0..9, A..Z->a..z, _, a..z, \
                                U+410..U+42F->U+430..U+44F, U+430..U+44F, \
                                U+0022, U+0025, U+0026, U+0027, U+002A, \
                                U+002C, U+002E, U+003A, U+003B, U+0040 
}

index test_json
{
        source                  = src4
        path                    = /var/lib/sphinxsearch/data/test_json
        min_word_len            = 2
        charset_table           = 0..9, A..Z->a..z, _, a..z, \
                                U+410..U+42F->U+430..U+44F, U+430..U+44F, \
                                U+0022, U+0025, U+0026, U+0027, U+002A, \
                                U+002C, U+002E, U+003A, U+003B, U+0040 
}

index test_indexer_stemmer
{
        source                  = src1
        path                    = /var/lib/sphinxsearch/data/test_indexer
        min_word_len            = 2
        morphology              = stem_en
        min_stemming_len        = 2
        wordforms		= /etc/sphinxsearch/synonyms.txt
	stopwords		= /etc/sphinxsearch/stopwords.txt
}

index test_indexer_lemmatizer
{
        source                  = src1
        path                    = /var/lib/sphinxsearch/data/test_indexer_lemmatizer
        min_word_len            = 2
	morphology		= lemmatize_en_all
	stopwords		= /etc/sphinxsearch/stopwords.txt
}

index test_blend_chars
{
        source                  = src1
        path                    = /var/lib/sphinxsearch/data/test_blend_chars
        min_word_len            = 1
	charset_table           = 0..9, A..Z->a..z, ., a..z
	blend_chars		= +, &, @, -, !
	blend_mode 		= trim_head, trim_tail, trim_none
}

index test_xmlpipe
{
	source 			= src2
	path			= /var/lib/sphinxsearch/data/test_xmlpipe
	min_word_len		= 2
}

index test_tsv
{
	source			= src5
	path			= /var/lib/sphinxsearch/data/test_tsv
	min_word_len		= 2
}
	

#############################################################################
## indexer settings
#############################################################################

indexer
{
	# memory limit, in bytes, kiloytes (16384K) or megabytes (256M)
	# optional, default is 32M, max is 2047M, recommended is 256M to 1024M
	mem_limit		= 1024M
}

#############################################################################
## searchd settings
#############################################################################

searchd
{
	# [hostname:]port[:protocol], or /unix/socket/path to listen on
	# known protocols are 'sphinx' (SphinxAPI) and 'mysql41' (SphinxQL)
	#
	# multi-value, multiple listen points are allowed
	# optional, defaults are 9312:sphinx and 9306:mysql41, as below
	#
	# listen			= 127.0.0.1
	# listen			= 192.168.0.1:9312
	# listen			= 9312
	# listen			= /var/run/searchd.sock
	listen			= 9312
	listen			= 9306:mysql41

	# log file, searchd run info is logged here
	# optional, default is 'searchd.log'
	log			= /var/log/sphinxsearch/searchd.log


	# query log file, all search queries are logged here
	# optional, default is empty (do not log queries)
	query_log		= /var/log/sphinxsearch/query.log


	# client read timeout, seconds
	# optional, default is 5
	#read_timeout		= 5

	# request timeout, seconds
	# optional, default is 5 minutes
	#client_timeout		= 300

	# maximum amount of children to fork (concurrent searches to run)
	# optional, default is 0 (unlimited)
	max_children		= 30

	# maximum amount of persistent connections from this master to each agent host
	# optional, but necessary if you use agent_persistent. It is reasonable to set the value
	# as max_children, or less on the agent's hosts.
	#persistent_connections_limit	= 30

	# PID file, searchd process ID file name
	# mandatory
	pid_file		= /var/run/sphinxsearch/searchd.pid

	# max amount of matches the daemon ever keeps in RAM, per-index
	# WARNING, THERE'S ALSO PER-QUERY LIMIT, SEE SetLimits() API CALL
	# default is 1000 (just like Google)
	#max_matches		= 1000

	# seamless rotate, prevents rotate stalls if precaching huge datasets
	# optional, default is 1
	seamless_rotate		= 1

	# whether to forcibly preopen all indexes on startup
	# optional, default is 1 (preopen everything)
	preopen_indexes		= 1

	# whether to unlink .old index copies on succesful rotation.
	# optional, default is 1 (do unlink)
	unlink_old		= 1

	# attribute updates periodic flush timeout, seconds
	# updates will be automatically dumped to disk this frequently
	# optional, default is 0 (disable periodic flush)
	#
	# attr_flush_period	= 900


	# instance-wide ondisk_dict defaults (per-index value take precedence)
	# optional, default is 0 (precache all dictionaries in RAM)
	#
	# ondisk_dict_default	= 1


	# MVA updates pool size
	# shared between all instances of searchd, disables attr flushes!
	# optional, default size is 1M
	#mva_updates_pool	= 1M

	# max allowed network packet size
	# limits both query packets from clients, and responses from agents
	# optional, default size is 8M
	max_packet_size		= 8M

	# crash log path
	# searchd will (try to) log crashed query to 'crash_log_path.PID' file
	# optional, default is empty (do not create crash logs)
	#
	# crash_log_path		= /var/log/sphinxsearch/crash


	# max allowed per-query filter count
	# optional, default is 256
	max_filters		= 256

	# max allowed per-filter values count
	# optional, default is 4096
	max_filter_values	= 4096


	# socket listen queue length
	# optional, default is 5
	#
	# listen_backlog		= 5


	# per-keyword read buffer size
	# optional, default is 256K
	#
	# read_buffer		= 256K


	# unhinted read size (currently used when reading hits)
	# optional, default is 32K
	#
	# read_unhinted		= 32K


	# max allowed per-batch query count (aka multi-query count)
	# optional, default is 32
	max_batch_queries	= 32


	# max common subtree document cache size, per-query
	# optional, default is 0 (disable subtree optimization)
	#
	# subtree_docs_cache	= 4M


	# max common subtree hit cache size, per-query
	# optional, default is 0 (disable subtree optimization)
	#
	# subtree_hits_cache	= 8M


	# multi-processing mode (MPM)
	# known values are none, fork, prefork, and threads
	# threads is required for RT backend to work
	# optional, default is fork
	workers			= threads # for RT to work


	# max threads to create for searching local parts of a distributed index
	# optional, default is 0, which means disable multi-threaded searching
	# should work with all MPMs (ie. does NOT require workers=threads)
	#
	# dist_threads		= 4


	# binlog files path; use empty string to disable binlog
	# optional, default is build-time configured data directory
	#
	# binlog_path		= # disable logging
	# binlog_path		= /var/lib/sphinxsearch/data # binlog.001 etc will be created there


	# binlog flush/sync mode
	# 0 means flush and sync every second
	# 1 means flush and sync every transaction
	# 2 means flush every transaction, sync every second
	# optional, default is 2
	#
	# binlog_flush		= 2


	# binlog per-file size limit
	# optional, default is 128M, 0 means no limit
	#
	# binlog_max_log_size	= 256M


	# per-thread stack size, only affects workers=threads mode
	# optional, default is 64K
	#
	# thread_stack			= 128K


	# per-keyword expansion limit (for dict=keywords prefix searches)
	# optional, default is 0 (no limit)
	#
	# expansion_limit		= 1000


	# RT RAM chunks flush period
	# optional, default is 0 (no periodic flush)
	#
	# rt_flush_period		= 900


	# query log file format
	# optional, known values are plain and sphinxql, default is plain
	#
	# query_log_format		= sphinxql


	# version string returned to MySQL network protocol clients
	# optional, default is empty (use Sphinx version)
	#
	# mysql_version_string	= 5.0.37


	# trusted plugin directory
	# optional, default is empty (disable UDFs)
	#
	# plugin_dir			= /usr/local/sphinx/lib


	# default server-wide collation
	# optional, default is libc_ci
	#
	# collation_server		= utf8_general_ci


	# server-wide locale for libc based collations
	# optional, default is C
	#
	# collation_libc_locale	= ru_RU.UTF-8


	# threaded server watchdog (only used in workers=threads mode)
	# optional, values are 0 and 1, default is 1 (watchdog on)
	#
	# watchdog				= 1

	
	# SphinxQL compatibility mode (legacy columns and their names)
	# optional, default is 1 (old-style)
	#
	# compat_sphinxql_magics	= 1


	# costs for max_predicted_time model, in (imaginary) nanoseconds
	# optional, default is "doc=64, hit=48, skip=2048, match=64"
	#
	# predicted_time_costs	= doc=64, hit=48, skip=2048, match=64


	# current SphinxQL state (uservars etc) serialization path
	# optional, default is none (do not serialize SphinxQL state)
	#
	# sphinxql_state			= sphinxvars.sql


	# maximum RT merge thread IO calls per second, and per-call IO size
	# useful for throttling (the background) OPTIMIZE INDEX impact
	# optional, default is 0 (unlimited)
	#
	# rt_merge_iops			= 40
	# rt_merge_maxiosize		= 1M


	# interval between agent mirror pings, in milliseconds
	# 0 means disable pings
	# optional, default is 1000
	#
	# ha_ping_interval		= 0


	# agent mirror statistics window size, in seconds
	# stats older than the window size (karma) are retired
	# that is, they will not affect master choice of agents in any way
	# optional, default is 60 seconds
	#
	# ha_period_karma			= 60


	# delay between preforked children restarts on rotation, in milliseconds
	# optional, default is 0 (no delay)
	#
	# prefork_rotation_throttle	= 100


	# a prefix to prepend to the local file names when creating snippets
	# with load_files and/or load_files_scatter options
	# optional, default is empty
	#
	# snippets_file_prefix		= /mnt/common/server1/
}

common
{
	# lemmatizer dictionaries base path
	lemmatizer_base 	= /etc/sphinxsearch/dicts
}

# --eof--

